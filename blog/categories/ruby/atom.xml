<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Devin Wadsworth]]></title>
  <link href="http://devinwadsworth.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://devinwadsworth.com/"/>
  <updated>2017-06-28T19:23:38-07:00</updated>
  <id>http://devinwadsworth.com/</id>
  <author>
    <name><![CDATA[Devin Wadsworth]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Photobox]]></title>
    <link href="http://devinwadsworth.com/blog/2014/11/02/photobox/"/>
    <updated>2014-11-02T11:20:12-08:00</updated>
    <id>http://devinwadsworth.com/blog/2014/11/02/photobox</id>
    <content type="html"><![CDATA[<p>I was tired of having thousands of photos in my Dropbox camera uploads, so I wrote a simple <a href="https://rubygems.org/gems/photobox">gem</a> to organize photos into folders.</p>

<p><img src="/images/photobox-unclustered.png" title="Unclustered" >
<img src="/images/arrow-right.png" title="Right arrow" >
<img src="/images/photobox-clustered.png" title="Clustered" ></p>

<p>The <a href="https://github.com/daymun/photobox">gem source</a> is available on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cache Rules Everything Around Me]]></title>
    <link href="http://devinwadsworth.com/blog/2014/09/07/cache-rules-everything-around-me/"/>
    <updated>2014-09-07T14:53:55-07:00</updated>
    <id>http://devinwadsworth.com/blog/2014/09/07/cache-rules-everything-around-me</id>
    <content type="html"><![CDATA[<p>For years, Firefox has enforced a strict same-origin policy for web fonts. This is the behavior recommended by the latest <a href="http://www.w3.org/TR/css3-fonts/#same-origin-restriction">W3C Fonts Spec</a>. As indicated by the spec, servers that you wish to host fonts on for another domain will need to be configured to respond with the appropriate Cross-Origin Resource Sharing (CORS) headers.</p>

<p>This behavior protects font publishers, but it also creates hassle for anyone using an external asset host or CDN. If the font asset response from your asset server doesn&rsquo;t include CORS headers, those fonts will not render correctly in the browser. Usually an empty square will be displayed instead of the desired character.</p>

<p>There&rsquo;s an <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=604421">old issue</a> on Mozilla&rsquo;s bug tracker where the decision to implement this as default behavior is discussed at length. As noted at the end of the thread, Chrome 37 (<a href="http://googlechromereleases.blogspot.com/2014/08/stable-channel-update_26.html">released to Stable on 8/26/14</a>) now complies with the W3C spec. Because of this, it&rsquo;s now more important than ever that your asset host is configured correctly.</p>

<p>If you use Cloudfront, this configuration is pretty straightforward as Amazon now offers <a href="http://aws.amazon.com/about-aws/whats-new/2014/06/26/amazon-cloudfront-device-detection-geo-targeting-host-header-cors/">full-fledged CORS support</a>. After you <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors">configure Cloudfront to forward the Origin header</a>, your origin server still needs to send the right headers &ndash; check out <a href="http://enable-cors.org/">enable-cors.org</a> for server specific configuration instructions. With nginx I simply had to use the <code>add_header</code> directive. Once the origin server is responding with the right headers, you&rsquo;ll need to manually bust the edge caches or generate a new asset manifest. You can see if the headers are there with <code>curl --head</code>.</p>

<p>One gotcha I ran into: Chrome does a preflight request before doing a GET for the font asset. If the preflight request doesn&rsquo;t have CORS headers, the actual GET will show as canceled in the webkit network console. It was hard to tell what was going on because the network console doesn&rsquo;t show preflight requests and <code>curl --head</code> shows the right headers (GET request without preflight). So, make sure you allow both GET and OPTIONS requests with the <code>Access-Control-Allow-Methods</code> header.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop pasting code to vendor/assets!]]></title>
    <link href="http://devinwadsworth.com/blog/2013/04/14/stop-pasting-code-to-vendor-slash-assets/"/>
    <updated>2013-04-14T23:55:00-07:00</updated>
    <id>http://devinwadsworth.com/blog/2013/04/14/stop-pasting-code-to-vendor-slash-assets</id>
    <content type="html"><![CDATA[<p>Use the <a href="http://twitter.github.io/bower/">Bower</a> <a href="https://github.com/spagalloco/bower">gem</a> instead!</p>

<p>I prefer the bower gem over <a href="https://github.com/rharriso/bower-rails/">bower-rails</a> because it <a href="https://github.com/spagalloco/bower#how-this-gem-differs-from-other-techniques">defaults to placing everything in components/</a>, instead of lib/ and vendor/. Using components/ is a nice cue to other developers that the project uses Bower.</p>

<p>Besides, Rails creates vendor/assets/javascripts/ and vendor/assets/stylesheets/ &ndash; this structure doesn&rsquo;t make sense for many repositories that include CSS and Javascript. Use components/project_name/ instead.</p>
]]></content>
  </entry>
  
</feed>
